C51 COMPILER V9.60.7.0   HC08                                                              07/04/2024 19:58:40 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE HC08
OBJECT MODULE PLACED IN .\Objects\hc08.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE hc08.c LARGE WARNINGLEVEL(1) OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\hc08.lst) TABS(2) OBJECT(.\Objects\hc08.obj)

line level    source

   1          #include<reg52.h>
   2          #include<intrins.h>
   3          #include <string.h>
   4          #include "hc08.h"
   5          #include "delay.h"
   6          #include "oled.h"
   7          #include "ds1302.h"
   8          #include "alarm.h"
   9          #include "mp3.h"
  10          #include "weather.h"
  11          #include "event.h"
  12          #include "keyscan.h"
  13          
  14          uchar hc08_enabled = 1;
  15          uchar receive_data, flag=0, index=0;
  16          uchar rcv_buffer[20];
  17          
  18          void switch_hour_type();
  19          
  20          void set_date_via_bt(){
  21   1        if(receive_data!='&'){
  22   2          if(receive_data=='?'){
  23   3            write_date(char_to_quadruple_digit(rcv_buffer[0],rcv_buffer[1],rcv_buffer[2],rcv_buffer[3]), char_to_do
             -uble_digit(rcv_buffer[4],rcv_buffer[5]), char_to_double_digit(rcv_buffer[6],rcv_buffer[7]));
  24   3            flag = 0;
  25   3            index = 0;
  26   3            return;
  27   3          }
  28   2          else rcv_buffer[index-1] = receive_data;
  29   2        }
  30   1        index++;
  31   1      }
  32          
  33          void set_time_via_bt(){
  34   1        if(receive_data!='@'){
  35   2          if(receive_data=='?'){
  36   3            write_time(char_to_double_digit(rcv_buffer[0],rcv_buffer[1]), char_to_double_digit(rcv_buffer[2],rcv_bu
             -ffer[3]), get_integer_second());
  37   3            flag = 0;
  38   3            index = 0;
  39   3            return;
  40   3          }
  41   2          else rcv_buffer[index-1] = receive_data;
  42   2        }
  43   1        index++;
  44   1      }
  45          
  46          void sync_time_via_bt(){
  47   1        if(receive_data!='$'){
  48   2          if(receive_data=='?'){
  49   3            write_date(char_to_quadruple_digit(rcv_buffer[0],rcv_buffer[1],rcv_buffer[2],rcv_buffer[3]), char_to_do
             -uble_digit(rcv_buffer[4],rcv_buffer[5]), char_to_double_digit(rcv_buffer[6],rcv_buffer[7]));
  50   3            write_time(char_to_double_digit(rcv_buffer[8],rcv_buffer[9]), char_to_double_digit(rcv_buffer[10],rcv_b
             -uffer[11]), char_to_double_digit(rcv_buffer[12],rcv_buffer[13]));
C51 COMPILER V9.60.7.0   HC08                                                              07/04/2024 19:58:40 PAGE 2   

  51   3            flag = 0;
  52   3            index = 0;
  53   3            return;
  54   3          }
  55   2          else rcv_buffer[index-1] = receive_data;
  56   2        }
  57   1        index++;
  58   1      }
  59          
  60          void set_alarm_via_bt(){
  61   1        if(receive_data!='%'){
  62   2          if(receive_data=='?'){
  63   3            set_alarm(char_to_double_digit(rcv_buffer[0],rcv_buffer[1]), char_to_double_digit(rcv_buffer[2],rcv_buf
             -fer[3]), Tinyint(rcv_buffer[4]), Tinyint(rcv_buffer[5]));
  64   3            flag = 0;
  65   3            index = 0;
  66   3            return;
  67   3          }
  68   2          else rcv_buffer[index-1] = receive_data;
  69   2        }
  70   1        index++;
  71   1      }
  72          
  73          void set_volume_via_bt(){
  74   1        if(receive_data!='#'){
  75   2          if(receive_data=='?'){
  76   3            set_notification_volume(5*Tinyint(rcv_buffer[0]));
  77   3            flag = 0;
  78   3            index = 0;
  79   3            return;
  80   3          }
  81   2          else rcv_buffer[index-1] = receive_data;
  82   2        }
  83   1        index++;
  84   1      }
  85          
  86          void rcv_weather_all_via_bt(){
  87   1        static uchar step=0;
  88   1        char weather_str[13];
  89   1        if(receive_data!='^'){
  90   2          if(receive_data=='?'){
  91   3            strncpy(weather_str, rcv_buffer, 12);
  92   3            weather_str[12] = 0;
  93   3            set_weather_from_str(step, weather_str);
  94   3            flag = 0;
  95   3            index = 0;
  96   3            step = 0;
  97   3            return;
  98   3          }
  99   2          else if(receive_data=='.'){
 100   3            strncpy(weather_str, rcv_buffer, 12);
 101   3            weather_str[12] = 0;
 102   3            set_weather_from_str(step, weather_str);
 103   3            flag = 0;
 104   3            index = 0;
 105   3            step++;
 106   3            sendData("WeatherReady");
 107   3            return;
 108   3          }
 109   2          else rcv_buffer[index-1] = receive_data;
 110   2        }
 111   1        index++;
C51 COMPILER V9.60.7.0   HC08                                                              07/04/2024 19:58:40 PAGE 3   

 112   1      }
 113          
 114          void set_event_via_bt(){
 115   1        if(receive_data!='`'){
 116   2          if(receive_data=='}'){
 117   3            rcv_buffer[index-1] = 0;
 118   3            set_event_content(rcv_buffer);
 119   3            flag = 0;
 120   3            index = 0;
 121   3            return;
 122   3          }
 123   2          else if(receive_data=='{'){
 124   3            set_event_control(char_to_quadruple_digit(rcv_buffer[0],rcv_buffer[1],rcv_buffer[2],rcv_buffer[3]), cha
             -r_to_double_digit(rcv_buffer[4],rcv_buffer[5]), char_to_double_digit(rcv_buffer[6],rcv_buffer[7]), Tinyint(rcv_buffer[8]
             -));
 125   3            flag = 0;
 126   3            index = 0;
 127   3            sendData("EventReady");
 128   3            return;
 129   3          }
 130   2          else rcv_buffer[index-1] = receive_data;
 131   2        }
 132   1        index++;
 133   1      }
 134          
 135          /********************************************************************
 136          * 名称 : Com_Int()
 137          * 功能 : 串口中断子函数
 138          * 输入 : 无 * 输出 : 无
 139          ***********************************************************************/
 140          void Com_Int(void) interrupt 4 {
 141   1        uchar i;
 142   1        if(!hc08_enabled) return;
 143   1        EA = 0;
 144   1        if(RI == 1){//当硬件接收到一个数据时，RI会置位
 145   2          RI = 0;
 146   2          LED = 0;
 147   2          receive_data = SBUF;//接收到的数据
 148   2          if(flag == 0){
 149   3            flag = receive_data;
 150   3            index = 0;
 151   3            strcpy(rcv_buffer, "");
 152   3          }
 153   2          switch(flag){
 154   3            case 0x2A:{
 155   4              switch_hour_type();
 156   4              flag=0;
 157   4              index=0;
 158   4              break;
 159   4            }
 160   3            case '&':{
 161   4              set_date_via_bt();
 162   4              break;
 163   4            }
 164   3            case '@':{
 165   4              set_time_via_bt();
 166   4              break;
 167   4            }
 168   3            case '$':{
 169   4              sync_time_via_bt();
 170   4              break;
 171   4            }
C51 COMPILER V9.60.7.0   HC08                                                              07/04/2024 19:58:40 PAGE 4   

 172   3            case '%':{
 173   4              set_alarm_via_bt();
 174   4              break;
 175   4            }
 176   3            case '#':{
 177   4              set_volume_via_bt();
 178   4              break;
 179   4            }
 180   3            case '^':{
 181   4              rcv_weather_all_via_bt();
 182   4              break;
 183   4            }
 184   3            case '`':{
 185   4              set_event_via_bt();
 186   4              break;
 187   4            }
 188   3            default:{
 189   4              break;
 190   4            }
 191   3          }
 192   2          LED = 1;
 193   2        }
 194   1        EA = 1;
 195   1      }
 196          
 197          void sendData(uchar *datas){
 198   1        uchar i=0;
 199   1        if(!hc08_enabled) return;
 200   1        while(datas[i]!='\0')
 201   1          { SBUF=datas[i];      //???????????????
 202   2            while(!TI);       //????????
 203   2            TI=0;
 204   2          i++;}       //?????????
 205   1      }
 206          
 207          /*******************************************************************************
 208          * 函 数 名       : UsartConfiguration()
 209          * 函数功能       : 设置串口
 210          * 输    入       : 无
 211          * 输    出       : 无
 212          *******************************************************************************/
 213          
 214          void UsartConfiguration()
 215          { 
 216   1        SCON=0X50;      //设置为工作方式1,8位数据，可变波特率
 217   1        TMOD=0X20;      //设置计数器工作方式2
 218   1        PCON=0X00;      //波特率不加倍
 219   1        TH1=0XFd;       //计数器初始值设置，9600@11.0592MHz
 220   1        TL1=0XFd;
 221   1        TR1=1;          //打开计数器
 222   1        ES = 1;         //开串口中断
 223   1        EA = 1;         //开总中断
 224   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    930    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =     25      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   HC08                                                              07/04/2024 19:58:40 PAGE 5   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
