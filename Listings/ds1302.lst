C51 COMPILER V9.60.7.0   DS1302                                                            05/29/2024 20:34:47 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN .\Objects\ds1302.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ds1302.c LARGE WARNINGLEVEL(1) OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\ds1302.lst) TABS(2) OBJECT(.\Objects\ds1302.obj)

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #include "ds1302.h"
   4          #include "oled.h"
   5          #include "delay.h"
   6          #include "lunar.h"
   7          
   8          uchar dis_time_buf[16]={0};
   9          
  10          //初始时间定义
  11          uchar time_buf[8] = {0x20,0x24,0x05,0x14,0x17,0x59,0x38,0x02};//初始时间2024年5月14号17点59分38秒 星期二
  12          
  13          //DS1302初始化函数
  14          void ds1302_init(void) 
  15          {
  16   1        RST=0;      //RST脚置低
  17   1        SCK=0;      //SCK脚置低
  18   1      }
  19          //向DS1302写入一字节数据
  20          void ds1302_write_byte(uchar addr, uchar d) 
  21          {
  22   1        uchar i;
  23   1        RST=1;          //启动DS1302总线  
  24   1        //写入目标地址：addr
  25   1        addr = addr & 0xFE;   //最低位置零，寄存器0位为0时写，为1时读
  26   1        for (i = 0; i < 8; i ++) {
  27   2          if (addr & 0x01) {
  28   3            IO=1;
  29   3            }
  30   2          else {
  31   3            IO=0;
  32   3            }
  33   2          SCK=1;      //产生时钟
  34   2          SCK=0;
  35   2          addr = addr >> 1;
  36   2          } 
  37   1        //写入数据：d
  38   1        for (i = 0; i < 8; i ++) {
  39   2          if (d & 0x01) {
  40   3            IO=1;
  41   3            }
  42   2          else {
  43   3            IO=0;
  44   3            }
  45   2          SCK=1;    //产生时钟
  46   2          SCK=0;
  47   2          d = d >> 1;
  48   2          }
  49   1        RST=0;    //停止DS1302总线
  50   1      }
  51          
  52          //从DS1302读出一字节数据
  53          uchar ds1302_read_byte(uchar addr) {
  54   1      
C51 COMPILER V9.60.7.0   DS1302                                                            05/29/2024 20:34:47 PAGE 2   

  55   1        uchar i,temp; 
  56   1        RST=1;          //启动DS1302总线
  57   1        //写入目标地址：addr
  58   1        addr = addr | 0x01;    //最低位置高，寄存器0位为0时写，为1时读
  59   1        for (i = 0; i < 8; i ++) {
  60   2          if (addr & 0x01) {
  61   3            IO=1;
  62   3            }
  63   2          else {
  64   3            IO=0;
  65   3            }
  66   2          SCK=1;
  67   2          SCK=0;
  68   2          addr = addr >> 1;
  69   2          } 
  70   1        //输出数据：temp
  71   1        for (i = 0; i < 8; i ++) {
  72   2          temp = temp >> 1;
  73   2          if (IO) {
  74   3            temp |= 0x80;
  75   3            }
  76   2          else {
  77   3            temp &= 0x7F;
  78   3            }
  79   2          SCK=1;
  80   2          SCK=0;
  81   2          } 
  82   1        RST=0;          //停止DS1302总线
  83   1        return temp;
  84   1      }
  85          //向DS1302写入时钟数据
  86          void ds1302_write_time(void)
  87          {
  88   1        ds1302_write_byte(ds1302_control_add,0x00);     //关闭写保护 
  89   1        ds1302_write_byte(ds1302_sec_add,0x80);       //暂停时钟 
  90   1        //ds1302_write_byte(ds1302_charger_add,0xa9);     //涓流充电 
  91   1        ds1302_write_byte(ds1302_year_add,time_buf[1]);   //年 
  92   1        ds1302_write_byte(ds1302_month_add,time_buf[2]);  //月 
  93   1        ds1302_write_byte(ds1302_date_add,time_buf[3]);   //日 
  94   1        ds1302_write_byte(ds1302_hr_add,time_buf[4]);   //时 
  95   1        ds1302_write_byte(ds1302_min_add,time_buf[5]);    //分
  96   1        ds1302_write_byte(ds1302_sec_add,time_buf[6]);    //秒
  97   1        ds1302_write_byte(ds1302_day_add,time_buf[7]);    //周 
  98   1        ds1302_write_byte(ds1302_control_add,0x80);     //打开写保护     
  99   1      }
 100          //从DS1302读出时钟数据
 101          void ds1302_read_time(void)  
 102          {
 103   1        time_buf[1]=ds1302_read_byte(ds1302_year_add);    //年 
 104   1        time_buf[2]=ds1302_read_byte(ds1302_month_add);   //月 
 105   1        time_buf[3]=ds1302_read_byte(ds1302_date_add);    //日 
 106   1        time_buf[4]=ds1302_read_byte(ds1302_hr_add);    //时 
 107   1        time_buf[5]=ds1302_read_byte(ds1302_min_add);   //分 
 108   1        time_buf[6]=(ds1302_read_byte(ds1302_sec_add))&0x7f;//秒，屏蔽秒的第7位，避免超出59
 109   1        time_buf[7]=ds1302_read_byte(ds1302_day_add);   //周  
 110   1      }
 111          
 112          void print_time_now(uchar x, uchar y, uchar hour_type){
 113   1        uchar hour;
 114   1        char time_to_show[11];
 115   1        read_discrete_time();
 116   1        if(hour_type == 12){
C51 COMPILER V9.60.7.0   DS1302                                                            05/29/2024 20:34:47 PAGE 3   

 117   2          hour = get_integer_hour();
 118   2          if(hour >= 12){
 119   3            time_to_show[0] = 'P';
 120   3            time_to_show[1] = 'M';
 121   3          }
 122   2          else{
 123   3            time_to_show[0] = 'A';
 124   3            time_to_show[1] = 'M';
 125   3          }
 126   2          if(hour > 12) hour -= 12;
 127   2          dis_time_buf[8] = hour / 10;
 128   2          dis_time_buf[9] = hour % 10;
 129   2        }
 130   1        else{
 131   2          time_to_show[0] = ' ';
 132   2          time_to_show[1] = ' ';
 133   2        }
 134   1        if(dis_time_buf[8] == 0) time_to_show[2] = ' ';
 135   1        else time_to_show[2] = (char)(dis_time_buf[8]+'0');
 136   1        time_to_show[3] = (char)(dis_time_buf[9]+'0');
 137   1        time_to_show[4] = ':';
 138   1        time_to_show[5] = (char)(dis_time_buf[10]+'0');
 139   1        time_to_show[6] = (char)(dis_time_buf[11]+'0');
 140   1        time_to_show[7] = ':';
 141   1        time_to_show[8] = (char)(dis_time_buf[12]+'0');
 142   1        time_to_show[9] = (char)(dis_time_buf[13]+'0');
 143   1        time_to_show[10] = 0;
 144   1        OLED_ShowString(x,y,time_to_show,16);
 145   1      }
 146          
 147          void print_date_now(uchar x, uchar y){
 148   1        char date_to_show[11];
 149   1        uchar weekday_char[2] = {16, 15};
 150   1        read_discrete_time();
 151   1        date_to_show[0] = (char)(dis_time_buf[0]+'0');
 152   1        date_to_show[1] = (char)(dis_time_buf[1]+'0');
 153   1        date_to_show[2] = (char)(dis_time_buf[2]+'0');
 154   1        date_to_show[3] = (char)(dis_time_buf[3]+'0');
 155   1        date_to_show[4] = '/';
 156   1        date_to_show[5] = (char)(dis_time_buf[4]+'0');
 157   1        date_to_show[6] = (char)(dis_time_buf[5]+'0');
 158   1        date_to_show[7] = '/';
 159   1        date_to_show[8] = (char)(dis_time_buf[6]+'0');
 160   1        date_to_show[9] = (char)(dis_time_buf[7]+'0');
 161   1        date_to_show[10] = 0;
 162   1        OLED_ShowString(x,y,date_to_show,16);
 163   1        weekday_char[1] = dis_time_buf[14];
 164   1        OLED_ShowChineseString(x+90,y,1,weekday_char,2);
 165   1      }
 166          
 167          void print_lunar(uchar x,uchar y,uchar month,uchar day){
 168   1        uchar lunar_date_char[4] = {0, 15, 13, 1};
 169   1        if(month>1) lunar_date_char[0] = month;
 170   1        else lunar_date_char[0] = 0;
 171   1        if(day<=10){
 172   2          lunar_date_char[2] = 13;
 173   2          lunar_date_char[3] = day;
 174   2        }
 175   1        else if(day<20){
 176   2          lunar_date_char[2] = 10;
 177   2          lunar_date_char[3] = day%10;
 178   2        }
C51 COMPILER V9.60.7.0   DS1302                                                            05/29/2024 20:34:47 PAGE 4   

 179   1        else if(day == 20){
 180   2          lunar_date_char[2] = 2;
 181   2          lunar_date_char[3] = 10;;
 182   2        }
 183   1        else if(day<30){
 184   2          lunar_date_char[2] = 14;
 185   2          lunar_date_char[3] = day%10;
 186   2        }
 187   1        else{
 188   2          lunar_date_char[2] = 3;
 189   2          lunar_date_char[3] = 10;
 190   2        }
 191   1        OLED_ShowChineseString(x,y,1,lunar_date_char,4);
 192   1      }
 193          
 194          void print_lunar_now(uchar x,uchar y){
 195   1        uchar lunar_date[2];
 196   1        get_lunar_calendar(get_integer_year(), get_integer_month(), get_integer_day(), lunar_date);
 197   1        print_lunar(x, y, lunar_date[0], lunar_date[1]);
 198   1      }
 199          
 200          void print_solar_term_now(uchar x,uchar y){
 201   1        char solar_term_char[2] = {0, 1};
 202   1        uchar num = get_solar_term_num(get_integer_year(), get_integer_month(), get_integer_day());
 203   1        solar_term_char[0] = num;
 204   1        solar_term_char[1] = num+1;
 205   1        OLED_ShowChineseString(x,y,2,solar_term_char,2);
 206   1      }
 207          
 208          void read_discrete_time()
 209          {
 210   1        ds1302_read_time();  //读取时间 
 211   1        dis_time_buf[0]=(time_buf[0]>>4); //年   
 212   1        dis_time_buf[1]=(time_buf[0]&0x0f);
 213   1         
 214   1        dis_time_buf[2]=(time_buf[1]>>4);   
 215   1        dis_time_buf[3]=(time_buf[1]&0x0f);
 216   1      
 217   1        dis_time_buf[4]=(time_buf[2]>>4); //月  
 218   1        dis_time_buf[5]=(time_buf[2]&0x0f);
 219   1         
 220   1        dis_time_buf[6]=(time_buf[3]>>4); //日   
 221   1        dis_time_buf[7]=(time_buf[3]&0x0f);
 222   1         
 223   1        dis_time_buf[14]=(time_buf[7]&0x07); //星期
 224   1         
 225   1        dis_time_buf[8]=(time_buf[4]>>4); //时   
 226   1        dis_time_buf[9]=(time_buf[4]&0x0f);
 227   1      
 228   1        dis_time_buf[10]=(time_buf[5]>>4); //分   
 229   1        dis_time_buf[11]=(time_buf[5]&0x0f);   
 230   1      
 231   1        dis_time_buf[12]=(time_buf[6]>>4); //秒   
 232   1        dis_time_buf[13]=(time_buf[6]&0x0f);
 233   1      }
 234           
 235          char isLeapYear(uint year) {
 236   1          if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
 237   2              return 1;
 238   2          } else {
 239   2              return 0;
 240   2          }
C51 COMPILER V9.60.7.0   DS1302                                                            05/29/2024 20:34:47 PAGE 5   

 241   1      }
 242          
 243          uint get_integer_year(){
 244   1        read_discrete_time();
 245   1        return dis_time_buf[0]*1000+dis_time_buf[1]*100+dis_time_buf[2]*10+dis_time_buf[3];
 246   1      }
 247          
 248          uchar get_integer_month(){
 249   1        read_discrete_time();
 250   1        return dis_time_buf[4]*10+dis_time_buf[5];
 251   1      }
 252          
 253          uchar get_integer_day(){
 254   1        read_discrete_time();
 255   1        return dis_time_buf[6]*10+dis_time_buf[7];
 256   1      }
 257          
 258          uchar get_integer_hour(){
 259   1        read_discrete_time();
 260   1        return dis_time_buf[8]*10+dis_time_buf[9];
 261   1      }
 262          
 263          uchar get_integer_minute(){
 264   1        read_discrete_time();
 265   1        return dis_time_buf[10]*10+dis_time_buf[11];
 266   1      }
 267          
 268          uchar get_integer_second(){
 269   1        read_discrete_time();
 270   1        return dis_time_buf[12]*10+dis_time_buf[13];
 271   1      }
 272          
 273          uchar get_integer_weekday(){
 274   1        read_discrete_time();
 275   1        return dis_time_buf[14];
 276   1      }
 277          
 278          uchar calculate_week_day(uint year, uchar month, uchar day){
 279   1        uchar iWeek;
 280   1        if(month==1||month==2) {
 281   2          month+=12;
 282   2          year--;
 283   2        }
 284   1        iWeek = (day+2*month+3*(month+1)/5+year+year/4-year/100+year/400)%7 + 1;
 285   1        return iWeek;
 286   1      }
 287          
 288          void write_time_to_buffer(uint year, uchar month, uchar day, uchar hour, uchar minute, uchar second, uchar
             - weekday){
 289   1        time_buf[0] = year / 1000 * 16 + (year / 100) % 10;
 290   1        time_buf[1] = ((year / 10) % 10) * 16 + year % 10;
 291   1        time_buf[2] = (month / 10) * 16 + month % 10;
 292   1        time_buf[3] = (day / 10) * 16 + day % 10;
 293   1        time_buf[4] = (hour / 10) * 16 + hour % 10;
 294   1        time_buf[5] = (minute / 10) * 16 + minute % 10;
 295   1        time_buf[6] = (second / 10) * 16 + second % 10;
 296   1        time_buf[7] = weekday;
 297   1        ds1302_write_time();
 298   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   DS1302                                                            05/29/2024 20:34:47 PAGE 6   

   CODE SIZE        =   1523    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =     24      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
