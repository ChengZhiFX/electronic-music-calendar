C51 COMPILER V9.60.7.0   SETTINGS                                                          07/04/2024 21:29:23 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SETTINGS
OBJECT MODULE PLACED IN .\Objects\settings.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE settings.c LARGE WARNINGLEVEL(1) OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXT
                    -END PRINT(.\Listings\settings.lst) TABS(2) OBJECT(.\Objects\settings.obj)

line level    source

   1          #include "ds1302.h"
   2          #include "settings.h"
   3          #include "mp3.h"
   4          #include "alarm.h"
   5          #include "keyscan.h"
   6          #include "delay.h"
   7          #include "oled.h"
   8          #include "bmp.h"
   9          #include "dht11.h"
  10          
  11          void page_set_date_and_time(){
  12   1        char set_date_and_time_chinese[] = {21,22,23,24,25,19,20}, saved_chinese[] = {19,20,13,14,15}, cancel_chi
             -nese[] = {62,63}, save_chinese[] = {14,15};
  13   1        char year_to_show[5] = "1970", month_to_show[3] = "01", day_to_show[3] = "01", hour_to_show[3] = "00", mi
             -nute_to_show[3] = "00", second_to_show[3] = "00";
  14   1        uchar weekday_char[2] = {16, 15};
  15   1        uint year = get_integer_year();
  16   1        uchar month = get_integer_month(), day = get_integer_day(), weekday = get_integer_weekday();
  17   1        uchar hour = get_integer_hour(), minute = get_integer_minute(), second = get_integer_second(), step = 1;
  18   1        OLED_Clear();
  19   1        quadruple_digit_to_string(year, year_to_show);
  20   1        double_digit_to_string(month, month_to_show);
  21   1        double_digit_to_string(day, day_to_show);
  22   1        double_digit_to_string(hour, hour_to_show);
  23   1        double_digit_to_string(minute, minute_to_show);
  24   1        double_digit_to_string(second, second_to_show);
  25   1        OLED_ShowChineseString(8,0,0,set_date_and_time_chinese,7);
  26   1      //  OLED_ShowString(8,0,"Set Date&Time",16);
  27   1        if(calculate_week_day(year, month, day) == 7) weekday_char[1] = 17;
  28   1        else weekday_char[1] = calculate_week_day(year, month, day);
  29   1        OLED_ShowChineseString(0,6,0,cancel_chinese,2);
  30   1        OLED_ShowChineseString(48,6,0,save_chinese,2);
  31   1        while(1){
  32   2          if(step == 1) OLED_ShowString_Reverse(0,2,year_to_show,16);
  33   2          else OLED_ShowString(0,2,year_to_show,16);
  34   2          OLED_ShowChar(32,2,'/',16);
  35   2          if(step == 2) OLED_ShowString_Reverse(40,2,month_to_show,16);
  36   2          else OLED_ShowString(40,2,month_to_show,16);
  37   2          OLED_ShowChar(56,2,'/',16);
  38   2          if(step == 3) OLED_ShowString_Reverse(64,2,day_to_show,16);
  39   2          else OLED_ShowString(64,2,day_to_show,16);
  40   2          OLED_ShowChineseString(90,2,1,weekday_char,2);
  41   2          
  42   2          if(step == 4) OLED_ShowString_Reverse(32,4,hour_to_show,16);
  43   2          else OLED_ShowString(32,4,hour_to_show,16);
  44   2          OLED_ShowChar(48,4,':',16);
  45   2          if(step == 5) OLED_ShowString_Reverse(56,4,minute_to_show,16);
  46   2          else OLED_ShowString(56,4,minute_to_show,16);
  47   2          OLED_ShowChar(72,4,':',16);
  48   2          if(step == 6) OLED_ShowString_Reverse(80,4,second_to_show,16);
  49   2          else OLED_ShowString(80,4,second_to_show,16);
  50   2          if(getKey() == 1){
  51   3            switch(step){
  52   4              case 1: {
C51 COMPILER V9.60.7.0   SETTINGS                                                          07/04/2024 21:29:23 PAGE 2   

  53   5                year++;
  54   5                if(year >= 10000) year = 0;
  55   5                quadruple_digit_to_string(year, year_to_show);
  56   5                day = adjust_30(year, month, day, 0);
  57   5                double_digit_to_string(day, day_to_show);
  58   5                if(calculate_week_day(year, month, day) == 7) weekday_char[1] = 17;
  59   5                else weekday_char[1] = calculate_week_day(year, month, day);
  60   5                break;
  61   5              }
  62   4              case 2: {
  63   5                month++;
  64   5                month = adjust_12(month);
  65   5                double_digit_to_string(month, month_to_show);
  66   5                day = adjust_30(year, month, day, 0);
  67   5                double_digit_to_string(day, day_to_show);
  68   5                if(calculate_week_day(year, month, day) == 7) weekday_char[1] = 17;
  69   5                else weekday_char[1] = calculate_week_day(year, month, day);
  70   5                break;
  71   5              }
  72   4              case 3: {
  73   5                day++;
  74   5                day = adjust_30(year, month, day, 0);
  75   5                double_digit_to_string(day, day_to_show);
  76   5                if(calculate_week_day(year, month, day) == 7) weekday_char[1] = 17;
  77   5                else weekday_char[1] = calculate_week_day(year, month, day);
  78   5                break;
  79   5              }
  80   4              case 4: {
  81   5                hour++;
  82   5                hour = adjust_24(hour);
  83   5                double_digit_to_string(hour, hour_to_show);
  84   5                break;
  85   5              }
  86   4              case 5: {
  87   5                minute++;
  88   5                minute = adjust_60(minute);
  89   5                double_digit_to_string(minute, minute_to_show);
  90   5                break;
  91   5              }
  92   4              case 6: {
  93   5                second++;
  94   5                second = adjust_60(second);
  95   5                double_digit_to_string(second, second_to_show);
  96   5                break;
  97   5              }
  98   4              default: break;
  99   4            }
 100   3          }
 101   2          else if(getKey() == 2){
 102   3            step++;
 103   3            if(step > 6) step = 1;
 104   3          }
 105   2          else if(getKey() == 3){
 106   3            OLED_Clear();
 107   3            break;
 108   3          }
 109   2          else if(getKey() == 4){
 110   3            OLED_Clear();
 111   3            write_date_and_time(year, month, day, hour, minute, second);
 112   3            OLED_DrawBMP(0, 0, 128, 4, success_icon);
 113   3            OLED_ShowChineseString(24,4,0,saved_chinese,5);
 114   3      //      OLED_ShowString(32,2,"Saved!",16);
C51 COMPILER V9.60.7.0   SETTINGS                                                          07/04/2024 21:29:23 PAGE 3   

 115   3            delay_ms(2000);
 116   3            OLED_Clear();
 117   3            break;
 118   3          }
 119   2        }
 120   1      }
 121          
 122          void page_set_notification(){
 123   1        char title_chinese[] = {26,27,28,29,30}, notification_vol_chinese[] = {26,27,2,10}, media_vol_chinese[] =
             - {108,109,2,10}, alert_vol_chinese[] = {110,111,2,10};
 124   1        uchar step = 1;
 125   1        OLED_Clear();
 126   1        OLED_ShowChineseString(24,0,0,title_chinese,5);
 127   1        OLED_ShowChineseString(20,2,0,notification_vol_chinese,4);
 128   1        OLED_ShowChar(84,2,':',16);
 129   1        OLED_ShowChineseString(20,4,0,media_vol_chinese,4);
 130   1        OLED_ShowChar(84,4,':',16);
 131   1        OLED_ShowChineseString(20,6,0,alert_vol_chinese,4);
 132   1        OLED_ShowChar(84,6,':',16);
 133   1        while(1){
 134   2          if(step == 1) OLED_ShowChar_Reverse(100,2,Char(get_notification_volume() / 5),16);
 135   2          else OLED_ShowChar(100,2,Char(get_notification_volume() / 5),16);
 136   2          if(step == 2) OLED_ShowChar_Reverse(100,4,Char(get_media_volume() / 5),16);
 137   2          else OLED_ShowChar(100,4,Char(get_media_volume() / 5),16);
 138   2          if(step == 3) OLED_ShowChar_Reverse(100,6,Char(get_alert_volume() / 5),16);
 139   2          else OLED_ShowChar(100,6,Char(get_alert_volume() / 5),16);
 140   2          if(getKey() == 1){
 141   3            stopmusic();
 142   3            if(step == 1){
 143   4              set_notification_volume(get_notification_volume() + 5);
 144   4              send_volume(1);
 145   4              playmusic(10);
 146   4            }
 147   3            else if(step == 2){
 148   4              set_media_volume(get_media_volume() + 5);
 149   4              send_volume(2);
 150   4              playmusic(17);
 151   4            }
 152   3            else if(step == 3){
 153   4              set_alert_volume(get_alert_volume() + 5);
 154   4              send_volume(3);
 155   4              playmusic(19);
 156   4            }
 157   3          }
 158   2          else if(getKey() == 2){
 159   3            stopmusic();
 160   3            if(step == 1){
 161   4              set_notification_volume(get_notification_volume() - 5);
 162   4              send_volume(1);
 163   4              playmusic(10);
 164   4            }
 165   3            else if(step == 2){
 166   4              set_media_volume(get_media_volume() - 5);
 167   4              send_volume(2);
 168   4              playmusic(17);
 169   4            }
 170   3            else if(step == 3){
 171   4              set_alert_volume(get_alert_volume() - 5);
 172   4              send_volume(3);
 173   4              playmusic(19);
 174   4            }
 175   3          }
C51 COMPILER V9.60.7.0   SETTINGS                                                          07/04/2024 21:29:23 PAGE 4   

 176   2          else if(getKey() == 3){
 177   3            stopmusic();
 178   3            send_volume(1);
 179   3            OLED_Clear();
 180   3            break;
 181   3          }
 182   2          else if(getKey() == 4){
 183   3            step++;
 184   3            if(step > 3) step = 1;
 185   3          }
 186   2        }
 187   1      }
 188          
 189          void page_mod_switch(){
 190   1        char temp_and_hum_sensor_chinese[] = {89,90,91,92,93}, audio_out_chinese[] = {2,94,95,63}, bluetooth_chin
             -ese[] = {50,51}, smog_sensor_chinese[] = {41,42,92,93};
 191   1        char enabled_chinese[] = {9,12}, disabled_chinese[] = {11,12}, saved_chinese[] = {19,20,13,14,15};
 192   1        char unable_to_boot_chinese[] = {115,31,32,71,116,9,117}, check_connection_chinese[] = {43,38,46,48,49,11
             -8,97,119};
 193   1        extern uchar dht11_enabled, mp3_enabled, hc08_enabled, mq2_enabled;
 194   1        uchar step = 1, dht11_temp = dht11_enabled, mp3_temp = mp3_enabled, hc08_temp = hc08_enabled, mq2_temp = 
             -mq2_enabled;
 195   1        OLED_Clear();
 196   1        OLED_ShowChineseString(0,0,0,temp_and_hum_sensor_chinese,5);
 197   1        OLED_ShowChar(80,0,'|',16);
 198   1        OLED_ShowChineseString(0,2,0,audio_out_chinese,4);
 199   1        OLED_ShowChar(80,2,'|',16);
 200   1        OLED_ShowChineseString(0,4,0,bluetooth_chinese,2);
 201   1        OLED_ShowChar(80,4,'|',16);
 202   1        OLED_ShowChineseString(0,6,0,smog_sensor_chinese,4);
 203   1        OLED_ShowChar(80,6,'|',16);
 204   1        while(1){
 205   2          if(step == 1){
 206   3            if(dht11_temp) OLED_ShowChineseString_Reverse(96,0,0,enabled_chinese,2);
 207   3            else OLED_ShowChineseString_Reverse(96,0,0,disabled_chinese,2);
 208   3          }
 209   2          else{
 210   3            if(dht11_temp) OLED_ShowChineseString(96,0,0,enabled_chinese,2);
 211   3            else OLED_ShowChineseString(96,0,0,disabled_chinese,2);
 212   3          }
 213   2          if(step == 2){
 214   3            if(mp3_temp) OLED_ShowChineseString_Reverse(96,2,0,enabled_chinese,2);
 215   3            else OLED_ShowChineseString_Reverse(96,2,0,disabled_chinese,2);
 216   3          }
 217   2          else{
 218   3            if(mp3_temp) OLED_ShowChineseString(96,2,0,enabled_chinese,2);
 219   3            else OLED_ShowChineseString(96,2,0,disabled_chinese,2);
 220   3          }
 221   2          if(step == 3){
 222   3            if(hc08_temp) OLED_ShowChineseString_Reverse(96,4,0,enabled_chinese,2);
 223   3            else OLED_ShowChineseString_Reverse(96,4,0,disabled_chinese,2);
 224   3          }
 225   2          else{
 226   3            if(hc08_temp) OLED_ShowChineseString(96,4,0,enabled_chinese,2);
 227   3            else OLED_ShowChineseString(96,4,0,disabled_chinese,2);
 228   3          }
 229   2          if(step == 4){
 230   3            if(mq2_temp) OLED_ShowChineseString_Reverse(96,6,0,enabled_chinese,2);
 231   3            else OLED_ShowChineseString_Reverse(96,6,0,disabled_chinese,2);
 232   3          }
 233   2          else{
 234   3            if(mq2_temp) OLED_ShowChineseString(96,6,0,enabled_chinese,2);
C51 COMPILER V9.60.7.0   SETTINGS                                                          07/04/2024 21:29:23 PAGE 5   

 235   3            else OLED_ShowChineseString(96,6,0,disabled_chinese,2);
 236   3          }
 237   2          if(getKey() == 1){
 238   3            if(step == 1) dht11_temp = dht11_temp? 0:1;
 239   3            else if(step == 2) mp3_temp = mp3_temp? 0:1;
 240   3            else if(step == 3) hc08_temp = hc08_temp? 0:1;
 241   3            else if(step == 4) mq2_temp = mq2_temp? 0:1;
 242   3          }
 243   2          else if(getKey() == 2){
 244   3            step++;
 245   3            if(step > 4) step = 1;
 246   3          }
 247   2          else if(getKey() == 3){
 248   3            OLED_Clear();
 249   3            break;
 250   3          }
 251   2          else if(getKey() == 4){
 252   3            OLED_Clear();
 253   3            if(dht11_temp && !dht11_try_catch_data()){
 254   4              OLED_ShowChineseString(24,0,0,temp_and_hum_sensor_chinese,5);
 255   4              OLED_ShowChineseString(8,4,0,unable_to_boot_chinese,7);
 256   4              OLED_ShowChineseString(0,6,0,check_connection_chinese,8);
 257   4              delay_ms(2000);
 258   4              OLED_Clear();
 259   4              OLED_ShowChineseString(0,0,0,temp_and_hum_sensor_chinese,5);
 260   4              OLED_ShowChar(80,0,'|',16);
 261   4              OLED_ShowChineseString(0,2,0,audio_out_chinese,4);
 262   4              OLED_ShowChar(80,2,'|',16);
 263   4              OLED_ShowChineseString(0,4,0,bluetooth_chinese,2);
 264   4              OLED_ShowChar(80,4,'|',16);
 265   4              OLED_ShowChineseString(0,6,0,smog_sensor_chinese,4);
 266   4              OLED_ShowChar(80,6,'|',16);
 267   4            }
 268   3            else{
 269   4              dht11_enabled = dht11_temp;
 270   4              mp3_enabled = mp3_temp;
 271   4              hc08_enabled = hc08_temp;
 272   4              mq2_enabled = mq2_temp;
 273   4              OLED_DrawBMP(0, 0, 128, 4, success_icon);
 274   4              OLED_ShowChineseString(24,4,0,saved_chinese,5);
 275   4              delay_ms(2000);
 276   4              OLED_Clear();
 277   4              break;
 278   4            }
 279   3          }
 280   2        }
 281   1        //HC08, MQ-2, DHT11, JQ8900
 282   1      }
 283          
 284          void page_about(){
 285   1        OLED_Clear();
 286   1        while(1){
 287   2          OLED_ShowString(16,0,"Copyright(C)",16);
 288   2          OLED_ShowString(8,2,"Zhang Jiacheng",16);
 289   2          OLED_ShowString(16,4,"202200120145",16);
 290   2          OLED_ShowString(0,6,"Chongxin College",16);
 291   2          if(getKey()){
 292   3            OLED_Clear();
 293   3            break;
 294   3          }
 295   2        }
 296   1      }
C51 COMPILER V9.60.7.0   SETTINGS                                                          07/04/2024 21:29:23 PAGE 6   

 297          
 298          void page_settings(){
 299   1        uchar date_and_time_chinese[] = {21,22,23,24,25}, notification_chinese[] = {26,27,28,29,30}, module_chine
             -se[] = {31,32,87,88,68}, about_chinese[] = {34,35,19,37};
 300   1        uchar selection = 0;
 301   1        OLED_Clear();
 302   1        while(1){
 303   2          OLED_ShowChineseString(24,0,0,date_and_time_chinese,5);
 304   2          OLED_ShowChineseString(24,2,0,notification_chinese,5);
 305   2          OLED_ShowChineseString(24,4,0,module_chinese,5);
 306   2          OLED_ShowChineseString(32,6,0,about_chinese,4);
 307   2      //    OLED_ShowString(24,0,"Date&Time",16);
 308   2      //    OLED_ShowString(24,2,"Notification",16);
 309   2      //    OLED_ShowString(24,4,"Module",16);
 310   2      //    OLED_ShowString(24,6,"About",16);
 311   2          OLED_ShowChar(16,selection*2,'>',16);
 312   2          if(getKey() == 1){
 313   3            OLED_ShowChar(16,selection*2,' ',16);
 314   3            if(selection == 0) selection = 3;
 315   3            else selection -= 1;
 316   3          }
 317   2          else if(getKey() == 2){
 318   3            OLED_ShowChar(16,selection*2,' ',16);
 319   3            if(selection == 3) selection = 0;
 320   3            else selection += 1;
 321   3          }
 322   2          else if(getKey() == 3){
 323   3            OLED_Clear();
 324   3            break;
 325   3          }
 326   2          else if(getKey() == 4){
 327   3            switch(selection){
 328   4              case 0: {page_set_date_and_time(); break;}
 329   4              case 1: {page_set_notification(); break;}
 330   4              case 2: {page_mod_switch(); break;}
 331   4              case 3: {page_about(); break;}
 332   4              default: break;
 333   4            }
 334   3          }
 335   2        }
 336   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3026    ----
   CONSTANT SIZE    =    171    ----
   XDATA SIZE       =   ----     129
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
