C51 COMPILER V9.60.7.0   SETTINGS                                                          07/03/2024 19:26:08 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SETTINGS
OBJECT MODULE PLACED IN .\Objects\settings.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE settings.c LARGE WARNINGLEVEL(1) OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXT
                    -END PRINT(.\Listings\settings.lst) TABS(2) OBJECT(.\Objects\settings.obj)

line level    source

   1          #include "ds1302.h"
   2          #include "settings.h"
   3          #include "mp3.h"
   4          #include "alarm.h"
   5          #include "keyscan.h"
   6          #include "delay.h"
   7          #include "oled.h"
   8          
   9          extern uchar time_buf[8];
  10          extern uchar smog_alarm_enable;
  11          
  12          void page_set_date_and_time(){
  13   1        char set_date_and_time_chinese[] = {21,22,23,24,25,19,20}, saved_chinese[] = {19,20,13,14,15};
  14   1        char year_to_show[5] = "1970";
  15   1        char month_to_show[3] = "01";
  16   1        char day_to_show[3] = "01";
  17   1        char hour_to_show[3] = "00";
  18   1        char minute_to_show[3] = "00";
  19   1        char second_to_show[3] = "00";
  20   1        uchar weekday_char[2] = {16, 15};
  21   1        uint year = get_integer_year();
  22   1        uchar month = get_integer_month(), day = get_integer_day(), weekday = get_integer_weekday();
  23   1        uchar hour = get_integer_hour(), minute = get_integer_minute(), second = get_integer_second(), step = 1;
  24   1        OLED_Clear();
  25   1        quadruple_digit_to_string(year, year_to_show);
  26   1        double_digit_to_string(month, month_to_show);
  27   1        double_digit_to_string(day, day_to_show);
  28   1        double_digit_to_string(hour, hour_to_show);
  29   1        double_digit_to_string(minute, minute_to_show);
  30   1        double_digit_to_string(second, second_to_show);
  31   1        OLED_ShowChineseString(8,0,0,set_date_and_time_chinese,7);
  32   1      //  OLED_ShowString(8,0,"Set Date&Time",16);
  33   1        if(calculate_week_day(year, month, day) == 7) weekday_char[1] = 17;
  34   1        else weekday_char[1] = calculate_week_day(year, month, day);
  35   1        while(1){
  36   2          if(step == 1) OLED_ShowString_Reverse(0,2,year_to_show,16);
  37   2          else OLED_ShowString(0,2,year_to_show,16);
  38   2          OLED_ShowChar(32,2,'/',16);
  39   2          if(step == 2) OLED_ShowString_Reverse(40,2,month_to_show,16);
  40   2          else OLED_ShowString(40,2,month_to_show,16);
  41   2          OLED_ShowChar(56,2,'/',16);
  42   2          if(step == 3) OLED_ShowString_Reverse(64,2,day_to_show,16);
  43   2          else OLED_ShowString(64,2,day_to_show,16);
  44   2          OLED_ShowChineseString(90,2,1,weekday_char,2);
  45   2          
  46   2          if(step == 4) OLED_ShowString_Reverse(32,4,hour_to_show,16);
  47   2          else OLED_ShowString(32,4,hour_to_show,16);
  48   2          OLED_ShowChar(48,4,':',16);
  49   2          if(step == 5) OLED_ShowString_Reverse(56,4,minute_to_show,16);
  50   2          else OLED_ShowString(56,4,minute_to_show,16);
  51   2          OLED_ShowChar(72,4,':',16);
  52   2          if(step == 6) OLED_ShowString_Reverse(80,4,second_to_show,16);
  53   2          else OLED_ShowString(80,4,second_to_show,16);
  54   2          if(getKey() == 1){
C51 COMPILER V9.60.7.0   SETTINGS                                                          07/03/2024 19:26:08 PAGE 2   

  55   3            switch(step){
  56   4              case 1: {
  57   5                year++;
  58   5                if(year >= 10000) year = 0;
  59   5                quadruple_digit_to_string(year, year_to_show);
  60   5                day = adjust_30(year, month, day, 0);
  61   5                double_digit_to_string(day, day_to_show);
  62   5                if(calculate_week_day(year, month, day) == 7) weekday_char[1] = 17;
  63   5                else weekday_char[1] = calculate_week_day(year, month, day);
  64   5                break;
  65   5              }
  66   4              case 2: {
  67   5                month++;
  68   5                month = adjust_12(month);
  69   5                double_digit_to_string(month, month_to_show);
  70   5                day = adjust_30(year, month, day, 0);
  71   5                double_digit_to_string(day, day_to_show);
  72   5                if(calculate_week_day(year, month, day) == 7) weekday_char[1] = 17;
  73   5                else weekday_char[1] = calculate_week_day(year, month, day);
  74   5                break;
  75   5              }
  76   4              case 3: {
  77   5                day++;
  78   5                day = adjust_30(year, month, day, 0);
  79   5                double_digit_to_string(day, day_to_show);
  80   5                if(calculate_week_day(year, month, day) == 7) weekday_char[1] = 17;
  81   5                else weekday_char[1] = calculate_week_day(year, month, day);
  82   5                break;
  83   5              }
  84   4              case 4: {
  85   5                hour++;
  86   5                hour = adjust_24(hour);
  87   5                double_digit_to_string(hour, hour_to_show);
  88   5                break;
  89   5              }
  90   4              case 5: {
  91   5                minute++;
  92   5                minute = adjust_60(minute);
  93   5                double_digit_to_string(minute, minute_to_show);
  94   5                break;
  95   5              }
  96   4              case 6: {
  97   5                second++;
  98   5                second = adjust_60(second);
  99   5                double_digit_to_string(second, second_to_show);
 100   5                break;
 101   5              }
 102   4              default: break;
 103   4            }
 104   3          }
 105   2          else if(getKey() == 2){
 106   3            step++;
 107   3            if(step > 6) step = 1;
 108   3          }
 109   2          else if(getKey() == 3){
 110   3            OLED_Clear();
 111   3            break;
 112   3          }
 113   2          else if(getKey() == 4){
 114   3            OLED_Clear();
 115   3            write_date_and_time(year, month, day, hour, minute, second);
 116   3            OLED_ShowChineseString(24,2,0,saved_chinese,5);
C51 COMPILER V9.60.7.0   SETTINGS                                                          07/03/2024 19:26:08 PAGE 3   

 117   3      //      OLED_ShowString(32,2,"Saved!",16);
 118   3            delay_ms(2000);
 119   3            OLED_Clear();
 120   3            break;
 121   3          }
 122   2        }
 123   1      }
 124          
 125          void page_set_notification(){
 126   1        char vol_to_show[] = "Volume:  ";
 127   1        vol_to_show[8] = (char)(get_volume() / 5 + '0');
 128   1        OLED_Clear();
 129   1        OLED_ShowString(16,0,"Notification",16);
 130   1        
 131   1        while(1){
 132   2          OLED_ShowString(20,2,vol_to_show,16);
 133   2          if(smog_alarm_enable) OLED_ShowString(32,6,"Enabled",16);
 134   2          else OLED_ShowString(32,6,"Disable",16);
 135   2          if(getKey() == 1){
 136   3            stopmusic();
 137   3            set_volume(get_volume()+5);
 138   3            vol_to_show[8] = (char)(get_volume() / 5 + '0');
 139   3            playmusic(10);
 140   3          }
 141   2          else if(getKey() == 2){
 142   3            stopmusic();
 143   3            set_volume(get_volume()-5);
 144   3            vol_to_show[8] = (char)(get_volume() / 5 + '0');
 145   3            playmusic(10);
 146   3          }
 147   2          else if(getKey() == 3){
 148   3            OLED_Clear();
 149   3            break;
 150   3          }
 151   2          else if(getKey() == 4){
 152   3            if(smog_alarm_enable) smog_alarm_enable = 0;
 153   3            else smog_alarm_enable = 1;
 154   3          }
 155   2        }
 156   1      }
 157          
 158          void page_mod_switch(){
 159   1        
 160   1      }
 161          
 162          void page_about(){
 163   1        OLED_Clear();
 164   1        while(1){
 165   2          OLED_ShowString(16,0,"Copyright(C)",16);
 166   2          OLED_ShowString(8,2,"Zhang Jiacheng",16);
 167   2          OLED_ShowString(16,4,"202200120145",16);
 168   2          OLED_ShowString(0,6,"Chongxin College",16);
 169   2          if(getKey()){
 170   3            OLED_Clear();
 171   3            break;
 172   3          }
 173   2        }
 174   1      }
 175          
 176          void page_settings(){
 177   1        uchar date_and_time_chinese[] = {21,22,23,24,25}, notification_chinese[] = {26,27,28,29,30}, module_chine
             -se[] = {31,32,33,34}, about_chinese[] = {34,35,19,37};
C51 COMPILER V9.60.7.0   SETTINGS                                                          07/03/2024 19:26:08 PAGE 4   

 178   1        uchar selection = 0;
 179   1        OLED_Clear();
 180   1        while(1){
 181   2          OLED_ShowChineseString(24,0,0,date_and_time_chinese,5);
 182   2          OLED_ShowChineseString(24,2,0,notification_chinese,5);
 183   2          OLED_ShowChineseString(32,4,0,module_chinese,4);
 184   2          OLED_ShowChineseString(32,6,0,about_chinese,4);
 185   2      //    OLED_ShowString(24,0,"Date&Time",16);
 186   2      //    OLED_ShowString(24,2,"Notification",16);
 187   2      //    OLED_ShowString(24,4,"Module",16);
 188   2      //    OLED_ShowString(24,6,"About",16);
 189   2          OLED_ShowChar(16,selection*2,'>',16);
 190   2          if(getKey() == 1){
 191   3            OLED_ShowChar(16,selection*2,' ',16);
 192   3            if(selection == 0) selection = 3;
 193   3            else selection -= 1;
 194   3          }
 195   2          else if(getKey() == 2){
 196   3            OLED_ShowChar(16,selection*2,' ',16);
 197   3            if(selection == 3) selection = 0;
 198   3            else selection += 1;
 199   3          }
 200   2          else if(getKey() == 3){
 201   3            OLED_Clear();
 202   3            break;
 203   3          }
 204   2          else if(getKey() == 4){
 205   3            switch(selection){
 206   4              case 0: {page_set_date_and_time(); break;}
 207   4              case 1: {page_set_notification(); break;}
 208   4              case 2: {page_mod_switch(); break;}
 209   4              case 3: {page_about(); break;}
 210   4              default: break;
 211   4            }
 212   3          }
 213   2        }
 214   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1640    ----
   CONSTANT SIZE    =    149    ----
   XDATA SIZE       =   ----      72
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
