C51 COMPILER V9.60.7.0   LUNAR                                                             07/04/2024 17:46:43 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LUNAR
OBJECT MODULE PLACED IN .\Objects\lunar.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lunar.c LARGE WARNINGLEVEL(1) OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\lunar.lst) TABS(2) OBJECT(.\Objects\lunar.obj)

line level    source

   1          #include "lunar.h"
   2          
   3          static unsigned int LunarCalendarDay;
   4          
   5          static code unsigned long LunarCalendarTable[] = {
   6            0x4D4AB8,0x0D4A4C,0x0DA541,0x25AAB6,0x056A49,0x7AADBD,0x025D52,0x092D47,0x5C95BA,0x0A954E,/*2001-2010*/
   7            0x0B4A43,0x4B5537,0x0AD54A,0x955ABF,0x04BA53,0x0A5B48,0x652BBC,0x052B50,0x0A9345,0x474AB9,/*2011-2020*/
   8            0x06AA4C,0x0AD541,0x24DAB6,0x04B64A,0x69573D,0x0A4E51,0x0D2646,0x5E933A,0x0D534D,0x05AA43,/*2021-2030*/
   9            0x36B537,0x096D4B,0xB4AEBF,0x04AD53,0x0A4D48,0x6D25BC,0x0D254F,0x0D5244,0x5DAA38,0x0B5A4C,/*2031-2040*/
  10            0x056D41,0x24ADB6,0x049B4A,0x7A4BBE,0x0A4B51,0x0AA546,0x5B52BA,0x06D24E,0x0ADA42,0x355B37,/*2041-2050*/
  11            0x09374B,0x8497C1,0x049753,0x064B48,0x66A53C,0x0EA54F,0x06B244,0x4AB638,0x0AAE4C,0x092E42,/*2051-2060*/
  12            0x3C9735,0x0C9649,0x7D4ABD,0x0D4A51,0x0DA545,0x55AABA,0x056A4E,0x0A6D43,0x452EB7,0x052D4B,/*2061-2070*/
  13            0x8A95BF,0x0A9553,0x0B4A47,0x6B553B,0x0AD54F,0x055A45,0x4A5D38,0x0A5B4C,0x052B42,0x3A93B6,/*2071-2080*/
  14            0x069349,0x7729BD,0x06AA51,0x0AD546,0x54DABA,0x04B64E,0x0A5743,0x452738,0x0D264A,0x8E933E,/*2081-2090*/
  15            0x0D5252,0x0DAA47,0x66B53B,0x056D4F,0x04AE45,0x4A4EB9,0x0A4D4C,0x0D1541,0x2D92B5          /*2091-2099*/
  16          };
  17          static code unsigned char SolarTermTable[] = {
  18            0x96,0xB4,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2000   
  19            0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2001   
  20            0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x78,0x87,0x87,     //2002   
  21            0x95,0xB4,0x96,0xA5,0x96,0x97,0x88,0x78,0x78,0x69,0x78,0x87,     //2003   
  22            0x96,0xB4,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2004   
  23            0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2005   
  24            0xA5,0xB4,0x96,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2006   
  25            0x95,0xB4,0x96,0xA5,0x96,0x97,0x88,0x78,0x78,0x69,0x78,0x87,     //2007   
  26            0x96,0xB4,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x87,0x78,0x87,0x86,     //2008   
  27            0xA5,0xB3,0xA5,0xB5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2009   
  28            0xA5,0xB4,0x96,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2010   
  29            0x95,0xB4,0x96,0xA5,0x96,0x97,0x88,0x78,0x78,0x79,0x78,0x87,     //2011   
  30            0x96,0xB4,0xA5,0xB5,0xA5,0xA6,0x87,0x88,0x87,0x78,0x87,0x86,     //2012   
  31            0xA5,0xB3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x87,     //2013   
  32            0xA5,0xB4,0x96,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2014   
  33            0x95,0xB4,0x96,0xA5,0x96,0x97,0x88,0x78,0x78,0x79,0x77,0x87,     //2015   
  34            0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x87,0x88,0x87,0x78,0x87,0x86,     //2016   
  35            0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x87,     //2017   
  36            0xA5,0xB4,0xA6,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2018   
  37            0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x79,0x77,0x87,     //2019   
  38            0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x97,0x87,0x87,0x78,0x87,0x86,     //2020   
  39            0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2021   
  40            0xA5,0xB4,0xA5,0xA5,0xA6,0x96,0x88,0x88,0x88,0x78,0x87,0x87,     //2022   
  41            0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x79,0x77,0x87,     //2023   
  42            0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x97,0x87,0x87,0x78,0x87,0x96,     //2024   
  43            0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2025   
  44            0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2026   
  45            0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x78,0x87,0x87,     //2027   
  46            0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x97,0x87,0x87,0x78,0x87,0x96,     //2028   
  47            0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x87,0x88,0x88,0x78,0x87,0x86,     //2029   
  48            0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x87,     //2030   
  49            0xA5,0xB4,0x96,0xA5,0x96,0x96,0x88,0x78,0x78,0x78,0x87,0x87,     //2031   
  50            0x95,0xB4,0xA5,0xB4,0xA5,0xA6,0x97,0x87,0x87,0x78,0x87,0x96,     //2032   
  51            0xA5,0xC3,0xA5,0xB5,0xA6,0xA6,0x88,0x88,0x88,0x78,0x87,0x86,     //2033   
  52            0xA5,0xB3,0xA5,0xA5,0xA6,0xA6,0x88,0x78,0x88,0x78,0x87,0x87,     //2034   
  53            0xA5,0xB4,0x96,0xA5,0xA6,0x96,0x88,0x88,0x78,0x78,0x87,0x87,     //2035   
  54          };
C51 COMPILER V9.60.7.0   LUNAR                                                             07/04/2024 17:46:43 PAGE 2   

  55          
  56          static code int MonthAdd[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
  57          
  58          uchar LunarCalendar(int year,int month,int day){
  59   1          int Spring_NY,Sun_NY,StaticDayCount;
  60   1          int index,flag;
  61   1          //Spring_NY 记录春节离当年元旦的天数。
  62   1          //Sun_NY 记录阳历日离当年元旦的天数。
  63   1          if( ((LunarCalendarTable[year-2001] & 0x0060) >> 5) == 1)
  64   1              Spring_NY = (LunarCalendarTable[year-2001] & 0x001F) - 1;
  65   1          else
  66   1              Spring_NY = (LunarCalendarTable[year-2001] & 0x001F) - 1 + 31;
  67   1          Sun_NY = MonthAdd[month-1] + day - 1;
  68   1          if((!(year % 4)) && (month > 2)) Sun_NY++;
  69   1          //StaticDayCount记录大小月的天数 29 或30
  70   1          //index 记录从哪个月开始来计算。
  71   1          //flag 是用来对闰月的特殊处理
  72   1      
  73   1          //判断阳历日在春节前还是春节后
  74   1          if (Sun_NY >= Spring_NY){//阳历日在春节后（含春节那天）
  75   2              Sun_NY -= Spring_NY;
  76   2              month = 1;
  77   2              index = 1;
  78   2              flag = 0;
  79   2              if((LunarCalendarTable[year - 2001] & (0x80000 >> (index-1))) ==0) StaticDayCount = 29;
  80   2              else StaticDayCount = 30;
  81   2              while(Sun_NY >= StaticDayCount){
  82   3                  Sun_NY -= StaticDayCount;
  83   3                  index++;
  84   3                  if(month == ((LunarCalendarTable[year - 2001] & 0xF00000) >> 20) ){
  85   4                      flag = ~flag;
  86   4                      if(flag == 0) month++;
  87   4                  }
  88   3                  else month++;
  89   3                  if((LunarCalendarTable[year - 2001] & (0x80000 >> (index-1)))==0) StaticDayCount=29;
  90   3                  else StaticDayCount=30;
  91   3              }
  92   2              day = Sun_NY + 1;
  93   2          }
  94   1          else{//阳历日在春节前
  95   2              Spring_NY -= Sun_NY;
  96   2              year--;
  97   2              month = 12;
  98   2              if(((LunarCalendarTable[year - 2001] & 0xF00000) >> 20)==0) index = 12;
  99   2              else index = 13;
 100   2              flag = 0;
 101   2              if((LunarCalendarTable[year - 2001] & (0x80000 >> (index-1)))==0) StaticDayCount = 29;
 102   2              else StaticDayCount = 30;
 103   2              while(Spring_NY > StaticDayCount){
 104   3                  Spring_NY -= StaticDayCount;
 105   3                  index--;
 106   3                  if(flag == 0) month--;
 107   3                  if(month == ((LunarCalendarTable[year - 2001] & 0xF00000) >> 20)) flag = ~flag;
 108   3                  if((LunarCalendarTable[year - 2001] & (0x80000 >> (index-1)))==0) StaticDayCount = 29;
 109   3                  else StaticDayCount = 30;
 110   3              }
 111   2              day = StaticDayCount - Spring_NY + 1;
 112   2          }
 113   1          LunarCalendarDay = day;
 114   1          LunarCalendarDay |= (month << 6);
 115   1          if(month == ((LunarCalendarTable[year - 1901] & 0xF00000) >> 20)) return 1;
 116   1          else return 0;
C51 COMPILER V9.60.7.0   LUNAR                                                             07/04/2024 17:46:43 PAGE 3   

 117   1      }
 118          
 119          uchar get_lunar_calendar(uint year, uchar month, uchar day, uchar lunar_date[2]){
 120   1          uchar flag=0;
 121   1          if(LunarCalendar(year,month,day)){
 122   2            lunar_date[0] = (LunarCalendarDay & 0x3C0) >> 6;
 123   2            flag = 1; //闰月
 124   2          }
 125   1          else lunar_date[0] = (LunarCalendarDay & 0x3C0) >> 6;
 126   1          lunar_date[1] = LunarCalendarDay & 0x3F;    
 127   1          return flag;
 128   1      }
 129          
 130          uchar get_solar_term_num(uint year, uchar month, uchar day){
 131   1        uchar temp;
 132   1        uint location=(year-2000)*12+(month)-1;
 133   1        if(day<15){
 134   2          temp = 15-day;
 135   2          if((SolarTermTable[location]>>4)==temp) return 2*(month*2-1);
 136   2          else return 0;
 137   2        }
 138   1        else if(day==15) return (0);
 139   1        else{
 140   2          temp=day-15;
 141   2          if((SolarTermTable[location]&0x0f) == temp) return 2*(month*2);
 142   2          else return 0;
 143   2        }
 144   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1187    ----
   CONSTANT SIZE    =    852    ----
   XDATA SIZE       =      2      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
