C51 COMPILER V9.60.7.0   WEATHER                                                           07/04/2024 19:58:40 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE WEATHER
OBJECT MODULE PLACED IN .\Objects\weather.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE weather.c LARGE WARNINGLEVEL(1) OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTE
                    -ND PRINT(.\Listings\weather.lst) TABS(2) OBJECT(.\Objects\weather.obj)

line level    source

   1          #include "weather.h"
   2          #include "oled.h"
   3          #include "keyscan.h"
   4          #include "delay.h"
   5          #include "ds1302.h"
   6          
   7          Weather weather[4];
   8          
   9          void weather_init(){
  10   1        uchar i;
  11   1        for(i=0;i<4;i++){
  12   2          weather[i].month = 0;
  13   2          weather[i].day = 0;
  14   2          weather[i].dayWeather = 0;
  15   2          weather[i].dayTemp = 0;
  16   2          weather[i].nightWeather = 0;
  17   2          weather[i].nightTemp = 0;
  18   2        }
  19   1      }
  20          
  21          void set_weather_from_str(uchar num, char weather_str[13]){
  22   1        weather[num].month = char_to_double_digit(weather_str[0], weather_str[1]);
  23   1        weather[num].day = char_to_double_digit(weather_str[2], weather_str[3]);
  24   1        weather[num].dayWeather = char_to_double_digit(weather_str[4], weather_str[5]);
  25   1        weather[num].dayTemp = char_to_double_digit(weather_str[6], weather_str[7]);
  26   1        weather[num].nightWeather = char_to_double_digit(weather_str[8], weather_str[9]);
  27   1        weather[num].nightTemp = char_to_double_digit(weather_str[10], weather_str[11]);
  28   1      }
  29          
  30          void page_weather_error(){
  31   1        char connect_ble_chinese[] = {43,48,49,50,51}, waiting_chinese[] = {52,53,54,55,4,5,56,57}, press_key_can
             -cel_chinese[] = {58,59,60,61,62,63};
  32   1        OLED_Clear();
  33   1        OLED_ShowChineseString(24,0,0,connect_ble_chinese,5);
  34   1        OLED_ShowChineseString(0,2,0,waiting_chinese,8);
  35   1        OLED_ShowChineseString(16,6,0,press_key_cancel_chinese,6);
  36   1      //  OLED_ShowString(0,0,"Waiting for App",16);
  37   1      //  OLED_ShowString(0,4,"Press any key",16);
  38   1      //  OLED_ShowString(0,6,"to cancel",16);
  39   1        while(1){
  40   2          if(weather[0].month != 0 && weather[0].day != 0) break;
  41   2          else if(getKey()){
  42   3            OLED_Clear();
  43   3            break;
  44   3          }
  45   2        }
  46   1      }
  47          
  48          void print_weather_all(uchar page){
  49   1        char daytime_chinese[] = {64,4}, night_chinese[] = {65,25};
  50   1        uchar dayWeather_str[] = {0,1}, nightWeather_str[] = {0,1};
  51   1        char month_to_show[] = "--", day_to_show[] = "--", dayTemp_to_show[] = "--", nightTemp_to_show[] = "--";
  52   1        double_digit_to_string(weather[page-1].month, month_to_show);
  53   1        double_digit_to_string(weather[page-1].day, day_to_show);
C51 COMPILER V9.60.7.0   WEATHER                                                           07/04/2024 19:58:40 PAGE 2   

  54   1        dayWeather_str[0] = weather[page-1].dayWeather*2;
  55   1        dayWeather_str[1] = weather[page-1].dayWeather*2 + 1;
  56   1        nightWeather_str[0] = weather[page-1].nightWeather*2;
  57   1        nightWeather_str[1] = weather[page-1].nightWeather*2 + 1;
  58   1        double_digit_to_string(weather[page-1].dayTemp, dayTemp_to_show);
  59   1        double_digit_to_string(weather[page-1].nightTemp, nightTemp_to_show);
  60   1        OLED_ShowString(32,0,month_to_show,16);
  61   1        OLED_ShowChinese(48,0,1,15);
  62   1        OLED_ShowString(64,0,day_to_show,16);
  63   1        OLED_ShowChinese(80,0,1,17);
  64   1        OLED_ShowChineseString(0,2,0,daytime_chinese,2);
  65   1        OLED_ShowChar(36,2,'|',16);
  66   1        OLED_ShowChineseString(48,2,3,dayWeather_str,2);
  67   1        OLED_ShowChar(84,2,'|',16);
  68   1        OLED_ShowString(96,2,dayTemp_to_show,16);
  69   1        OLED_ShowChinese(112,2,3,136);
  70   1        OLED_ShowChineseString(0,4,0,night_chinese,2);
  71   1        OLED_ShowChar(36,4,'|',16);
  72   1        OLED_ShowChineseString(48,4,3,nightWeather_str,2);
  73   1        OLED_ShowChar(84,4,'|',16);
  74   1        OLED_ShowString(96,4,nightTemp_to_show,16);
  75   1        OLED_ShowChinese(112,4,3,136);
  76   1      }
  77          
  78          //void print_weather_base_now(uchar x, uchar y){
  79          //  uchar i, weather_str[2] = {0,0};
  80          //  for(i=0;i<4;i++){
  81          //    if(get_integer_month() == weather[i].month && get_integer_day() == weather[i].day){
  82          //      if(get_integer_hour() < 6){
  83          //        if(i-1>=0 && i-1<4){
  84          //          weather_str[0] = weather[i-1].nightWeather*2;
  85          //          weather_str[1] = weather[i-1].nightWeather*2 + 1;
  86          //        }
  87          //      }
  88          //      else if(get_integer_hour() >= 18){
  89          //        weather_str[0] = weather[i].nightWeather*2;
  90          //        weather_str[1] = weather[i].nightWeather*2 + 1;
  91          //      }
  92          //      else{
  93          //        weather_str[0] = weather[i].dayWeather*2;
  94          //        weather_str[1] = weather[i].dayWeather*2 + 1;
  95          //      }
  96          //      OLED_ShowChineseString(x,y,3,weather_str,2);
  97          //    }
  98          //  }
  99          //}
 100          
 101          void page_weather_all(){
 102   1        char press_key_turn_page_chinese[] = {58,112,106,61,113,114};
 103   1        uchar page = 1;
 104   1        if(weather[0].month == 0 && weather[0].day == 0){
 105   2          page_weather_error();
 106   2          if(weather[0].month == 0 && weather[0].day == 0) return;
 107   2        }
 108   1        OLED_Clear();
 109   1        OLED_ShowChineseString(16,6,0,press_key_turn_page_chinese,6);
 110   1        while(1){
 111   2          print_weather_all(page);
 112   2          if(getKey() == 1){
 113   3            page--;
 114   3            if(page < 1) page = 1;
 115   3          }
C51 COMPILER V9.60.7.0   WEATHER                                                           07/04/2024 19:58:40 PAGE 3   

 116   2          else if(getKey() == 2){
 117   3            page++;
 118   3            if(page > 4) page = 4;
 119   3          }
 120   2          else if(getKey() == 3){
 121   3            OLED_Clear();
 122   3            break;
 123   3          }
 124   2          else if(getKey() == 4){
 125   3            OLED_Clear();
 126   3            break;
 127   3          }
 128   2        }
 129   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1104    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =     24      51
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
