C51 COMPILER V9.60.7.0   OLED                                                              07/03/2024 20:48:49 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE oled.c LARGE WARNINGLEVEL(1) OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\oled.lst) TABS(2) OBJECT(.\Objects\oled.obj)

line level    source

   1          #include "oled.h"
   2          #include "oledfont.h"
   3          #include "delay.h"
   4          
   5          //OLED的显存
   6          //存放格式如下.
   7          //[0]0 1 2 3 ... 127  
   8          //[1]0 1 2 3 ... 127  
   9          //[2]0 1 2 3 ... 127  
  10          //[3]0 1 2 3 ... 127  
  11          //[4]0 1 2 3 ... 127  
  12          //[5]0 1 2 3 ... 127  
  13          //[6]0 1 2 3 ... 127  
  14          //[7]0 1 2 3 ... 127        
  15          
  16          /**********************************************
  17          //IIC Start
  18          **********************************************/
  19          void IIC_Start()
  20          {
  21   1        OLED_SCLK_Set() ;
  22   1        OLED_SDIN_Set();
  23   1        OLED_SDIN_Clr();
  24   1        OLED_SCLK_Clr();
  25   1      }
  26          
  27          /**********************************************
  28          //IIC Stop
  29          **********************************************/
  30          void IIC_Stop()
  31          {
  32   1        OLED_SCLK_Set() ;
  33   1        OLED_SDIN_Clr();
  34   1        OLED_SDIN_Set();
  35   1      }
  36          
  37          void IIC_Wait_Ack()
  38          {
  39   1        OLED_SCLK_Set() ;
  40   1        OLED_SCLK_Clr();
  41   1      }
  42          /**********************************************
  43          // IIC Write byte
  44          **********************************************/
  45          
  46          void Write_IIC_Byte(uchar IIC_Byte)
  47          {
  48   1        uchar i;
  49   1        uchar m,da;
  50   1        da=IIC_Byte;
  51   1        OLED_SCLK_Clr();
  52   1        for(i=0;i<8;i++)    
  53   1        {
  54   2            m=da;
C51 COMPILER V9.60.7.0   OLED                                                              07/03/2024 20:48:49 PAGE 2   

  55   2          //  OLED_SCLK_Clr();
  56   2          m=m&0x80;
  57   2          if(m==0x80)
  58   2          {OLED_SDIN_Set();}
  59   2          else OLED_SDIN_Clr();
  60   2            da=da<<1;
  61   2          OLED_SCLK_Set();
  62   2          OLED_SCLK_Clr();
  63   2          }
  64   1      }
  65          
  66          /**********************************************
  67          // IIC Write Command
  68          **********************************************/
  69          void Write_IIC_Command(uchar IIC_Command)
  70          {
  71   1         IIC_Start();
  72   1         Write_IIC_Byte(0x78);            //Slave address,SA0=0
  73   1        IIC_Wait_Ack(); 
  74   1         Write_IIC_Byte(0x00);      //write command
  75   1        IIC_Wait_Ack(); 
  76   1         Write_IIC_Byte(IIC_Command); 
  77   1        IIC_Wait_Ack(); 
  78   1         IIC_Stop();
  79   1      }
  80          /**********************************************
  81          // IIC Write Data
  82          **********************************************/
  83          void Write_IIC_Data(uchar IIC_Data)
  84          {
  85   1         IIC_Start();
  86   1         Write_IIC_Byte(0x78);      //D/C#=0; R/W#=0
  87   1         IIC_Wait_Ack();  
  88   1         Write_IIC_Byte(0x40);      //write data
  89   1         IIC_Wait_Ack();  
  90   1         Write_IIC_Byte(IIC_Data);
  91   1         IIC_Wait_Ack();  
  92   1         IIC_Stop();
  93   1      }
  94          void OLED_WR_Byte(unsigned dat,unsigned cmd)
  95          {
  96   1        if(cmd)
  97   1        {
  98   2          Write_IIC_Data(dat);
  99   2        }
 100   1        else 
 101   1        { 
 102   2          Write_IIC_Command(dat);
 103   2        }
 104   1      }
 105          
 106          /********************************************
 107          // fill_Picture
 108          ********************************************/
 109          //void fill_picture(uchar fill_Data)
 110          //{
 111          //  uchar m,n;
 112          //  for(m=0;m<8;m++)
 113          //  {
 114          //    OLED_WR_Byte(0xb0+m,0);   //page0-page1
 115          //    OLED_WR_Byte(0x00+0x02,0);    //low column start address
 116          //    OLED_WR_Byte(0x10,0);   //high column start address
C51 COMPILER V9.60.7.0   OLED                                                              07/03/2024 20:48:49 PAGE 3   

 117          //    for(n=0;n<128;n++)
 118          //      {
 119          //        OLED_WR_Byte(fill_Data,1);
 120          //      }
 121          //  }
 122          //}
 123          
 124          
 125          //坐标设置
 126          void OLED_Set_Pos(uchar x, uchar y) 
 127          {   OLED_WR_Byte(0xb0+y,OLED_CMD);
 128   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 129   1        OLED_WR_Byte((x&0x0f)+0x02,OLED_CMD); 
 130   1      } 
 131          
 132          //开启OLED显示    
 133          void OLED_Display_On(void)
 134          {
 135   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 136   1        OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 137   1        OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 138   1      }
 139          
 140          //关闭OLED显示     
 141          //void OLED_Display_Off(void)
 142          //{
 143          //  OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 144          //  OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 145          //  OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 146          //}
 147          
 148          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!    
 149          void OLED_Clear(void)  
 150          {  
 151   1        uchar i,n;        
 152   1        for(i=0;i<8;i++)  
 153   1        {  
 154   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 155   2          OLED_WR_Byte (0x00+0x02,OLED_CMD);      //设置显示位置―列低地址
 156   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 157   2          for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 158   2        } //更新显示
 159   1      }
 160          
 161          //void OLED_On(void)  
 162          //{  
 163          //  uchar i,n;        
 164          //  for(i=0;i<8;i++)  
 165          //  {  
 166          //    OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 167          //    OLED_WR_Byte (0x00+0x02,OLED_CMD);      //设置显示位置―列低地址
 168          //    OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 169          //    for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA); 
 170          //  } //更新显示
 171          //}
 172          
 173          //在指定位置显示一个字符,包括部分字符
 174          //x:0~127
 175          //y:0~63
 176          //mode:0,反白显示;1,正常显示         
 177          //size:选择字体 16/12 
 178          void OLED_ShowChar(uchar x,uchar y,uchar chr,uchar Char_Size){          
C51 COMPILER V9.60.7.0   OLED                                                              07/03/2024 20:48:49 PAGE 4   

 179   1              uchar c=0,i=0;    
 180   1      //        x+=2;
 181   1              c=chr-' ';//???????            
 182   1              if(x>Max_Column-1){x=0;y=y+2;}
 183   1              if(Char_Size ==16){
 184   2                  OLED_Set_Pos(x,y);    
 185   2                  for(i=0;i<8;i++)
 186   2                  OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 187   2                  OLED_Set_Pos(x,y+1);
 188   2                  for(i=0;i<8;i++)
 189   2                  OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 190   2              }
 191   1              else if(Char_Size == 12){    
 192   2                  OLED_Set_Pos(x,y);
 193   2                  for(i=0;i<6;i++)
 194   2                  OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 195   2              }
 196   1              else if(Char_Size == 24){    
 197   2                  OLED_Set_Pos(x,y);    
 198   2                  for(i=0;i<12;i++)
 199   2                      OLED_WR_Byte(F12X24[c*36+i],OLED_DATA);
 200   2                  OLED_Set_Pos(x,y+1);
 201   2                  for(i=0;i<12;i++)
 202   2                      OLED_WR_Byte(F12X24[c*36+i+12],OLED_DATA);
 203   2                  OLED_Set_Pos(x,y+2);
 204   2                  for(i=0;i<12;i++)
 205   2                      OLED_WR_Byte(F12X24[c*36+i+24],OLED_DATA);
 206   2              }
 207   1      }
 208          void OLED_ShowChar_Reverse(uchar x,uchar y,uchar chr,uchar Char_Size){          
 209   1              uchar c=0,i=0;    
 210   1      //        x+=2;
 211   1              c=chr-' ';//???????            
 212   1              if(x>Max_Column-1){x=0;y=y+2;}
 213   1              if(Char_Size ==16)
 214   1                  {
 215   2                  OLED_Set_Pos(x,y);    
 216   2                  for(i=0;i<8;i++)
 217   2                  OLED_WR_Byte(~F8X16[c*16+i],OLED_DATA);
 218   2                  OLED_Set_Pos(x,y+1);
 219   2                  for(i=0;i<8;i++)
 220   2                  OLED_WR_Byte(~F8X16[c*16+i+8],OLED_DATA);
 221   2                  }
 222   1                  else if(Char_Size == 12){    
 223   2                      OLED_Set_Pos(x,y);
 224   2                      for(i=0;i<6;i++)
 225   2                      OLED_WR_Byte(~F6x8[c][i],OLED_DATA);
 226   2                      
 227   2                  }
 228   1              else if(Char_Size == 24){    
 229   2                  OLED_Set_Pos(x,y);    
 230   2                  for(i=0;i<12;i++)
 231   2                      OLED_WR_Byte(~F12X24[c*36+i],OLED_DATA);
 232   2                  OLED_Set_Pos(x,y+1);
 233   2                  for(i=0;i<12;i++)
 234   2                      OLED_WR_Byte(~F12X24[c*36+i+12],OLED_DATA);
 235   2                  OLED_Set_Pos(x,y+2);
 236   2                  for(i=0;i<12;i++)
 237   2                      OLED_WR_Byte(~F12X24[c*36+i+24],OLED_DATA);
 238   2              }
 239   1      }
 240          //m^n函数
C51 COMPILER V9.60.7.0   OLED                                                              07/03/2024 20:48:49 PAGE 5   

 241          //uint oled_pow(uchar m,uchar n)
 242          //{
 243          //  uint result=1;   
 244          //  while(n--)result*=m;    
 245          //  return result;
 246          //}     
 247          
 248          //显示2个数字
 249          //x,y :起点坐标  
 250          //len :数字的位数
 251          //size:字体大小
 252          //mode:模式 0,填充模式;1,叠加模式
 253          //num:数值(0~4294967295);       
 254          //void OLED_ShowNum(uchar x,uchar y,uint num,uchar len,uchar size2)
 255          //{
 256          //  uchar t,temp;
 257          //  uchar enshow=0;              
 258          //  for(t=0;t<len;t++)
 259          //  {
 260          //    temp=(num/oled_pow(10,len-t-1))%10;
 261          //    if(enshow==0&&t<(len-1))
 262          //    {
 263          //      if(temp==0)
 264          //      {
 265          //        OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 266          //        continue;
 267          //      }else enshow=1;
 268          //    }
 269          //    OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 270          //  }
 271          //}
 272          
 273          //显示一个字符号串
 274          void OLED_ShowString(uchar x,uchar y,uchar *chr,uchar Char_Size){
 275   1        uchar j=0;
 276   1      //    x+=2;
 277   1        while (chr[j]!='\0'){
 278   2          OLED_ShowChar(x,y,chr[j],Char_Size);
 279   2          x+=Char_Size/2;
 280   2      //    if(x>120){x=0;y+=2;}
 281   2          j++;
 282   2        }
 283   1      }
 284          
 285          void OLED_ShowString_Reverse(uchar x,uchar y,uchar *chr,uchar Char_Size){
 286   1        uchar j=0;
 287   1      //    x+=2;
 288   1        while (chr[j]!='\0'){
 289   2          OLED_ShowChar_Reverse(x,y,chr[j],Char_Size);
 290   2          x+=Char_Size/2;
 291   2      //    if(x>120){x=0;y+=2;}
 292   2          j++;
 293   2        }
 294   1      }
 295          
 296          //显示汉字
 297          void OLED_ShowChinese(uchar x, uchar y, uchar sel_lib, uchar num){
 298   1        uchar t, adder=0;
 299   1        uchar (*lib)[32];
 300   1        switch(sel_lib){
 301   2          case 0: {lib = Hzk; break;}
 302   2          case 1: {lib = Lunar; break;}
C51 COMPILER V9.60.7.0   OLED                                                              07/03/2024 20:48:49 PAGE 6   

 303   2          case 2: {lib = SolarTermLib; break;}
 304   2          case 3: {lib = WeatherLib; break;}
 305   2          default: {OLED_ShowChar_Reverse(x,y,'?',16); return;}
 306   2        }
 307   1        OLED_Set_Pos(x,y);
 308   1        for(t=0;t<16;t++){
 309   2          OLED_WR_Byte(lib[2*num][t],OLED_DATA);
 310   2          adder+=1;
 311   2        }
 312   1        OLED_Set_Pos(x,y+1);  
 313   1        for(t=0;t<16;t++){  
 314   2          OLED_WR_Byte(lib[2*num+1][t],OLED_DATA);
 315   2          adder+=1;
 316   2        }
 317   1      }
 318          
 319          void OLED_ShowChinese_Reverse(uchar x, uchar y, uchar sel_lib, uchar num){
 320   1        uchar t, adder=0;
 321   1        uchar (*lib)[32];
 322   1        switch(sel_lib){
 323   2          case 0: {lib = Hzk; break;}
 324   2          case 1: {lib = Lunar; break;}
 325   2          case 2: {lib = SolarTermLib; break;}
 326   2          case 3: {lib = WeatherLib; break;}
 327   2          default: {OLED_ShowChar_Reverse(x,y,'?',16); return;}
 328   2        }
 329   1        OLED_Set_Pos(x,y);
 330   1        for(t=0;t<16;t++){
 331   2          OLED_WR_Byte(~lib[2*num][t],OLED_DATA);
 332   2          adder+=1;
 333   2        }
 334   1        OLED_Set_Pos(x,y+1);  
 335   1        for(t=0;t<16;t++){  
 336   2          OLED_WR_Byte(~lib[2*num+1][t],OLED_DATA);
 337   2          adder+=1;
 338   2        }
 339   1      }
 340          
 341          void OLED_ShowChineseString(uchar x,uchar y,uchar sel_lib,uchar chr[],uchar length)
 342          {
 343   1          uchar j=0;
 344   1      //    x+=2;
 345   1          for(j=0;j<length;j++){
 346   2            OLED_ShowChinese(x, y, sel_lib, chr[j]);
 347   2            x+=16;
 348   2            if(x>112){x=0;y+=2;}
 349   2          }
 350   1      }
 351          
 352          void OLED_ShowChineseString_Reverse(uchar x,uchar y,uchar sel_lib,uchar chr[],uchar length)
 353          {
 354   1          uchar j=0;
 355   1      //    x+=2;
 356   1          for(j=0;j<length;j++){
 357   2            OLED_ShowChinese_Reverse(x, y, sel_lib, chr[j]);
 358   2            x+=16;
 359   2            if(x>112){x=0;y+=2;}
 360   2          }
 361   1      }
 362          
 363          /***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0~128，y为页的范围0~8*****************/
 364          void OLED_DrawBMP(uchar x0, uchar y0,uchar x1, uchar y1,uchar BMP[])
C51 COMPILER V9.60.7.0   OLED                                                              07/03/2024 20:48:49 PAGE 7   

 365          {   
 366   1        unsigned int j=0;
 367   1        uchar x,y;
 368   1        if(y1%8==0) y=y1/8;      
 369   1        else y=y1/8+1;
 370   1        for(y=y0;y<y1;y++)
 371   1        {
 372   2          OLED_Set_Pos(x0,y);
 373   2          for(x=x0;x<x1;x++)
 374   2            {      
 375   3              OLED_WR_Byte(BMP[j++],OLED_DATA);       
 376   3            }
 377   2        }
 378   1      } 
 379          
 380          //初始化SSD1306             
 381          void OLED_Init(void)
 382          {   
 383   1       
 384   1        OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 385   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 386   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 387   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 388   1        OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 389   1        OLED_WR_Byte(0x81,OLED_CMD); // contract control
 390   1        OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 391   1        OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 392   1        OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 393   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 394   1        OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 395   1        OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 396   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 397   1        OLED_WR_Byte(0x00,OLED_CMD);//
 398   1        
 399   1        OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 400   1        OLED_WR_Byte(0x80,OLED_CMD);//
 401   1        
 402   1        OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 403   1        OLED_WR_Byte(0x05,OLED_CMD);//
 404   1        
 405   1        OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 406   1        OLED_WR_Byte(0xF1,OLED_CMD);//
 407   1        
 408   1        OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 409   1        OLED_WR_Byte(0x12,OLED_CMD);//
 410   1        
 411   1        OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 412   1        OLED_WR_Byte(0x30,OLED_CMD);//
 413   1        
 414   1        OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 415   1        OLED_WR_Byte(0x14,OLED_CMD);//
 416   1        
 417   1        OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 418   1      }  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1825    ----
   CONSTANT SIZE    =  24116    ----
   XDATA SIZE       =   ----      70
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.60.7.0   OLED                                                              07/03/2024 20:48:49 PAGE 8   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
